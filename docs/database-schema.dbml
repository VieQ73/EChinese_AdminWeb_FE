// Enable UUID extension

Table Users {
  id uuid [primary key, default: `uuid_generate_v4()`]
  username varchar(50) [unique]
  password_hash varchar(255)
  name varchar(50) [not null]
  avatar_url text
  email varchar(255) [unique]
  provider varchar(20) [note: "Enum: 'google', 'apple', 'local'"]
  provider_id varchar(255)
  role varchar(10) [default: 'user', note: "Enum: 'user', 'admin', 'super admin'"]
  is_active boolean [default: true]
  isVerify boolean [default: false]
  community_points int [default: 0]
  subscription_id uuid [not null]
  subscription_expiry timestamptz [note: "Cho phép NULL cho Free user và người đăng ký gói vĩnh viễn"]
  level varchar(3) [not null, note: "Enum: '1', '2', '3', '4', '5', '6', '7-9'"]
  badge_level int [not null, default: 0]
  language varchar(10) [not null, note: "Enum: 'Tiếng Việt', 'Tiếng Anh'"]
  created_at timestamptz [default: `CURRENT_TIMESTAMP`]
  last_login timestamptz
  
  Note: '''
  - Bảng trung tâm cho hồ sơ người dùng, hỗ trợ đăng nhập qua username/password, goole, apple.
  - Username/password_hash cho đăng nhập local (hash bcrypt), provider/provider_id cho OAuth (Google/Apple).
  - Email và name có thể null.
  - Điểm cộng đồng tổng hợp từ Posts/Comments (likes*10, posts*20, comments_received*20), lưu trực tiếp để tối ưu query.
  - isVerify hỗ trợ xác thực email, tăng bảo mật.
  - subscription_id: not null - tự động gán id gói free cho người dùng ngay khi tạo tài khoản
  '''
  
  Indexes {
    username [unique]
    email [unique]
    (provider, provider_id) [type: btree]
    created_at [type: btree]
    role [type: btree]
    community_points [type: btree]
  }
}

// Table UserSessions
Table UserSessions {
  id uuid [primary key, default: `uuid_generate_v4()`]
  user_id uuid [not null]
  login_at timestamptz [not null, default: `CURRENT_TIMESTAMP`]
  logout_at timestamptz
  device varchar(50) [note: "mobile, web, desktop"]
  ip_address varchar(50)

  Note: '''
  - Lưu lại chi tiết từng phiên login/logout.
  - Dùng để tính toán thời gian online chi tiết hoặc phát hiện đăng nhập bất thường.
  '''

  Indexes {
    user_id [type: btree]
    login_at [type: btree]
  }
}

// Table UserDailyActivity
Table UserDailyActivity {
  user_id uuid [not null]
  date date [not null]
  minutes_online int [default: 0]
  login_count int [default: 0]

  Note: '''
  - Tóm tắt hoạt động theo ngày (minutes online, số lần login).
  - Hỗ trợ thống kê theo tuần/tháng dễ dàng.
  '''

  Indexes {
    user_id [type: btree]
    date [type: btree]
  }

  primary key (user_id, date)
}

// Table UserStreaks
Table UserStreaks {
  user_id uuid [primary key]
  current_streak int [default: 0]
  longest_streak int [default: 0]
  last_login_date date

  Note: '''
  - Quản lý chuỗi ngày đăng nhập liên tục (gamification).
  - current_streak reset nếu người dùng bỏ lỡ 1 ngày.
  - longest_streak lưu kỷ lục cao nhất để hiển thị thành tựu.
  '''
}

//Table Achievements
Table Achievements {
  id uuid [primary key, default: `uuid_generate_v4()`]
  name varchar(100) [not null, unique, note: "Tên thành tích, ví dụ: 'Gấu chăm chỉ', 'Thánh tra cứu'"]
  description text [not null, note: "Mô tả thành tích, ví dụ: 'Đăng nhập liên tục 7 ngày'"]
  criteria jsonb [not null, note: "Tiêu chí đạt được dưới dạng JSON để linh hoạt, ví dụ: {'type': 'login_streak', 'min_streak': 7} hoặc {'type': 'translation_usage', 'min_count': 30, 'feature': 'ai_translate'}"]
  icon text [note: "URL icon hiển thị cho thành tích"]
  points int [default: 0, note: "Điểm thưởng cộng vào community_points khi đạt được"]
  is_active boolean [default: true, note: "Admin có thể tắt/mở thành tích"]
  created_at timestamptz [default: `CURRENT_TIMESTAMP`]
  updated_at timestamptz [default: `CURRENT_TIMESTAMP`]
  
  Note: '''
  - Quản lý các thành tích (achievements) do admin tạo/sửa.
  - criteria JSONB cho phép định nghĩa linh hoạt các điều kiện (dựa trên UserStreaks, UserUsage, TranslationHistory, etc.).
  - Ví dụ criteria:
    - {'type': 'login_streak', 'min_streak': 7} -> Thành tích 'Gấu chăm chỉ'
    - {'type': 'translation_usage', 'min_count': 30, 'feature': 'ai_translate'} -> Thành tích 'Thánh tra cứu'
    - {'type': 'community_points', 'min_points': 1000} -> Thành tích 'Người đóng góp xuất sắc'
  - Cron job hoặc trigger kiểm tra criteria và cấp thành tích qua UserAchievements.
  - points: Số điểm thưởng, cộng vào Users.community_points khi đạt được.
  '''
  
  Indexes {
    name [unique]
    is_active [type: btree]
  }
}

//Table UserAchievements
Table UserAchievements {
  id uuid [primary key, default: `uuid_generate_v4()`]
  user_id uuid [not null]
  achievement_id uuid [not null]
  achieved_at timestamptz [default: `CURRENT_TIMESTAMP`]
  progress jsonb [note: "Tiến độ hiện tại nếu cần (ví dụ: {'current_count': 25, 'required': 30}), NULL nếu không theo dõi progress"]
  
  Note: '''
  - Liên kết N:N giữa Users và Achievements, lưu thời gian đạt được.
  - progress JSONB để theo dõi tiến độ (nếu thành tích có tiêu chí đếm dần, như số lần dịch).
  - Unique constraint (user_id, achievement_id) để tránh cấp trùng lặp.
  - Cron job update progress và cấp thành tích khi đạt criteria.
  '''
  
  Indexes {
    (user_id, achievement_id) [unique]
    user_id [type: btree]
    achievement_id [type: btree]
    achieved_at [type: btree]
  }
}

// Table Subscriptions
Table Subscriptions {
  id uuid [primary key, default: `uuid_generate_v4()`]
  name varchar(100) [unique, not null]
  daily_quota_ai_lesson int [default: 0]
  daily_quota_translate int [default: 0]
  price decimal(10,2) [default: 0]
  duration_months int [note: "NULL for Permanent plans. Positive values for time-limited plans."]
  is_active boolean [default: true]
  created_at timestamptz [default: `CURRENT_TIMESTAMP`]
  updated_at timestamptz [default: `CURRENT_TIMESTAMP`]
  
  Note: '''
  - duration_months: NULL biểu thị gói Vĩnh Viễn.
  - Admin có thể tùy ý Tạo/Sửa/Xóa gói. Admin chỉnh sửa tên, thời hạn, quota (không hard-code).
  - duration_months: 1 cho tháng, 3 cho ba tháng, null cho vĩnh viễn/miễn phí.
  - quota cho AI (tạo bài học, dịch), reset hàng ngày qua cron job.
  - price cho thanh toán, is_active để kích hoạt/gỡ gói.
  '''
  
  Indexes {
    name [unique]
  }
}

// Table BadgeLevels
Table BadgeLevels {
  level int [unique, primary key]
  name varchar(50) [not null]
  icon TEXT 
  
  Note: '''
  - Tên huy hiệu tùy chỉnh (admin chỉnh sửa).
  - Công thức nâng cấp huy hiệu: 
    - Level 1: >=100 điểm cộng đồng (tuần) hoặc >=50% HSK thấp.
    - Level 2: >=500 (tháng) hoặc >=80% HSK trung.
    - Level 3: >=2000 (năm) hoặc top 9 thi thử 3 lần.
    - Level 4: Chỉ admin.
  '''
}

// Table Payments
Table Payments {
  id uuid [primary key, default: `uuid_generate_v4()`]
  user_id uuid [not null]
  subscription_id uuid [not null]
  amount decimal(10,2) [not null]
  currency varchar(3) [default: 'VND']
  status varchar(20) [default: 'pending', note: "Enum: 'pending', 'successful', 'failed', 'refunded', 'manual_confirmed'"]
  payment_method varchar(50) [not null, note: "Enum: 'visa/mastercard', 'bank_transfer', 'momo', 'zalopay', 'vnpay', etc.'"]
  gateway_transaction_id varchar(255) [unique, not null]
  transaction_date timestamptz [default: `CURRENT_TIMESTAMP`]
  gateway_response json
  processed_by_admin uuid [note: "Admin/Super Admin ID that processed this transaction (usually for refunds or manual confirmation)."]
  notes text
  
  Note: '''
  - Theo dõi chi tiết mọi giao dịch mua gói đăng ký.
  - Gateway_transaction_id là ID duy nhất từ cổng thanh toán (ví dụ: VNPAY, Momo, Stripe).
  - Processed_by_admin cho các trường hợp hoàn tiền hoặc xác nhận thủ công.
  '''
  
  Indexes {
    user_id [type: btree]
    status [type: btree]
    transaction_date [type: btree]
    payment_method [type: btree]
  }
}

//Table Posts
Table Posts {
  id uuid [primary key, default: `uuid_generate_v4()`]
  user_id uuid [not null]
  title varchar(100) [not null]
  content json [not null, note: "Rich text JSON: bold, italic, underline, list, link,..."]
  topic varchar(50) [not null, note: "Enum: 'Cơ khí', 'CNTT', 'Dịch', 'Du học', 'Du lịch', 'Góc chia sẻ', 'Tìm bạn học chung', 'Học tiếng Trung', 'Tìm gia sư', 'Việc làm', 'Văn hóa', 'Thể thao', 'Xây dựng', 'Y tế', 'Tâm sự', 'Khác'"]
  likes int [default: 0]
  views int [default: 0]
  created_at timestamptz [default: `CURRENT_TIMESTAMP`]

  //Moderation
  status varchar(20) [default: 'published', note: "Enum: 'draft','published','hidden','removed','archived'"]
  is_approved boolean [default: true, note: "False = chờ duyệt / vi phạm / bị ẩn"]
  auto_flagged boolean [default: false, note: "True = bị AI phát hiện nghi ngờ vi phạm"]
  is_pinned boolean [default: false, note: "Admin/Superadmin có thể ghim bài viết"]

  deleted_at timestamptz [note: "Thời điểm bị gỡ (soft delete)"]
  deleted_reason text [note: "Lý do gỡ (do user hoặc admin)"]
  deleted_by uuid [note: "Ai gỡ (user tự gỡ hoặc admin)"]

  Note: '''
  - Khi user tự xóa bài: status='removed', deleted_by=user_id, is_approved=true.
  - Khi admin xóa: status='removed', deleted_by=admin_id, is_approved=false, tạo Violation.
  - Khi AI nghi ngờ: auto_flagged=true, status='hidden' chờ admin xem.
  - Bài bị removed sẽ bị xóa cứng sau 7 ngày nếu không được khôi phục.
  '''

  Indexes {
    user_id [type: btree]
    topic [type: btree]
    created_at [type: btree]
    status [type: btree]
    auto_flagged [type: btree]
    is_pinned [type: btree]
  }
}



// Table PostLikes
Table PostLikes {
  id uuid [primary key, default: `uuid_generate_v4()`]
  post_id uuid [not null]
  user_id uuid [not null]
  created_at timestamptz [default: `CURRENT_TIMESTAMP`]

  Note: '''
  - Quản lý ai đã like bài viết.
  - Cho phép hiển thị danh sách người like.
  - Dùng để query các bài viết user đã like.
  '''

  Indexes {
    (post_id, user_id) [unique] // 1 user chỉ được like 1 lần
    post_id [type: btree]
    user_id [type: btree]
  }
}

// Table PostViews
Table PostViews {
  id uuid [primary key, default: `uuid_generate_v4()`]
  post_id uuid [not null]
  user_id uuid [note: "NULL nếu khách (chưa đăng nhập)"]
  viewed_at timestamptz [default: `CURRENT_TIMESTAMP`]

  Note: '''
  - Quản lý chi tiết ai đã xem bài viết.
  - Hỗ trợ tính năng "bài viết đã xem".
  - Nếu chỉ cần số lượng view thì vẫn cập nhật vào Posts.views.
  '''

  Indexes {
    post_id [type: btree]
    user_id [type: btree]
  }
}

// Table Comments
Table Comments {
  id uuid [primary key, default: `uuid_generate_v4()`]
  post_id uuid [not null]
  user_id uuid [not null]
  content json [not null, note: "Rich text JSON"]
  parent_comment_id uuid
  created_at timestamptz [default: `CURRENT_TIMESTAMP`]
  deleted_at timestamptz
  deleted_reason text
  deleted_by uuid [null, note: "ai gỡ"]

  Note: '''
  - Comment có thể bị gỡ/xóa. 
  - Admin chỉ có quyền gỡ/khôi phục, superadmin có quyền xóa vĩnh viễn.
  - parent_comment_id hỗ trợ comment lồng nhau.
  - deleted_reason + deleted_by để tra cứu lý do và người thực hiện.
  '''
  
  Indexes {
    post_id [type: btree]
    user_id [type: btree]
    parent_comment_id [type: btree]
    created_at [type: btree]
  }
}

// Table PostMediaMap
Table PostMediaMap {
  id uuid [primary key, default: `uuid_generate_v4()`]
  post_id uuid [not null]
  media_id uuid [not null]
  order_no int [default: 0, note: "Thứ tự hiển thị (0–2, tối đa 3 ảnh/post)."]

  Note: '''
  - Liên kết bài viết với ảnh trong bảng Media.
  - Một bài viết có thể có 0–3 ảnh.
  - enforce rule qua logic app hoặc constraint check.
  '''
  
  Indexes {
    post_id [type: btree]
    media_id [type: btree]
  }
}

// Table ModerationLogs
Table ModerationLogs {
  id uuid [primary key, default: `uuid_generate_v4()`]
  target_type varchar(20) [not null, note: "Enum: 'post', 'comment'"]
  target_id uuid [not null]
  action varchar(30) [not null, note: "Enum: 'gỡ', 'khôi phục'"]
  reason text
  performed_by uuid [not null]
  created_at timestamptz [default: `CURRENT_TIMESTAMP`]

  Note: '''
  - Lưu lại toàn bộ lịch sử thao tác quản trị.
  - Phục vụ kiểm toán/audit trail, minh bạch quản trị.
  - Khác với deleted_by/deleted_reason trong Posts/Comments (chỉ lưu trạng thái cuối).
  '''
  
  Indexes {
    target_type [type: btree]
    target_id [type: btree]
    performed_by [type: btree]
  }
}

// Table MockTests Thông tin kỳ thi (mock test)
Table MockTests {
  id uuid [primary key, default: `uuid_generate_v4()`]
  type varchar(10) [not null, note: "Enum: 'HSK', 'TOCFL', 'D4', 'HSKK'"]
  level varchar(10) [not null, note: "Ví dụ: HSK1–HSK6, HSK7-9, TOCFL A1–C2"]
  title varchar(100) [not null]
  total_time_limit int [not null, note: "Tổng thời gian làm bài (phút)"]
  total_max_score int [not null]
  instructions text
  is_active boolean [default: true]
  created_by uuid [note: "Người tạo (Admin)"]
  created_at timestamptz [default: `CURRENT_TIMESTAMP`]
  updated_at timestamptz [default: `CURRENT_TIMESTAMP`]
  deleted_at timestamptz [note: "Soft delete (ẩn tạm thời)"]

  Note: '''
  - Bảng gốc quản lý đề thi thử.
  - Ví dụ: 'HSK3 - Đề số 1'.
  '''
  
  Indexes {
    (type, level) [type: btree]
    created_by [type: btree]
    is_active [type: btree]
  }
}

// Các phần trong đề (Listening, Reading, Writing...)
Table MockTestSections {
  id uuid [primary key, default: `uuid_generate_v4()`]
  test_id uuid [not null]
  name varchar(50) [not null, note: "Listening, Reading, Writing, Speaking..."]
  order_no int [not null, default: 1]
  time_limit int [note: "Giới hạn thời gian section (phút), NULL nếu không tách riêng"]
  max_score int [not null]
  total_questions int [not null]

  Note: '''
  - Mỗi đề thi có nhiều section.
  - order_no để sắp xếp (ví dụ Listening = 1, Reading = 2).
  '''
  
  Indexes {
    test_id [type: btree]
    order_no [type: btree]
  }
}

// Câu hỏi trong section
Table MockTestQuestions {
  id uuid [primary key, default: `uuid_generate_v4()`]
  section_id uuid [not null]
  order_no int [not null]
  type varchar(20) [not null, note: "Enum: 'mcq','fill','write','repeat','describe','answer'"]
  text text [note: "Nội dung câu hỏi"]
  options jsonb [note: "Array<string> cho MCQ, null nếu không có lựa chọn"]
  correct_answer text [note: "Chỉ số cho MCQ hoặc text cho dạng khác"]
  explanation text [note: "Giải thích đáp án (dùng khi review)"]
  media_id uuid [note: "Tham chiếu Media (audio/hình ảnh)"]
  start_time int [note: "Thời điểm bắt đầu (giây) trong file audio"]
  end_time int [note: "Thời điểm kết thúc (giây) trong file audio"]
  is_visual boolean [default: false, note: "true nếu là câu dựa trên hình ảnh"]

  Note: '''
  - Câu hỏi có thể đi kèm file nghe hoặc hình.
  - start_time/end_time dùng để phát lại 1 đoạn audio trong file nghe lớn.
  '''
  
  Indexes {
    section_id [type: btree]
    order_no [type: btree]
    type [type: btree]
    media_id [type: btree]
  }
}

// =======================
// BẢNG KẾT QUẢ NGƯỜI DÙNG
// =======================

// Tổng hợp điểm cao nhất của user cho 1 đề thi
Table UserTestScores {
  id uuid [primary key, default: `uuid_generate_v4()`]
  user_id uuid [not null]
  test_id uuid [not null]
  highest_total_score int [default: 0]
  created_at timestamptz [default: `CURRENT_TIMESTAMP`]

  Note: '''
  - Lưu điểm cao nhất của user cho từng đề.
  - Dùng để xếp hạng nhanh (leaderboard).
  - Chi tiết từng lần thi tách ra ở bảng UserTestAttempts.
  '''

  Indexes {
    (user_id, test_id) [unique]
    highest_total_score [type: btree]
    created_at [type: btree]
  }
}

// Lần làm bài cụ thể của user
Table UserTestAttempts {
  id uuid [primary key, default: `uuid_generate_v4()`]
  user_id uuid [not null]
  test_id uuid [not null]
  started_at timestamptz [default: `CURRENT_TIMESTAMP`]
  submitted_at timestamptz
  total_score int
  section_scores jsonb [note: "Ví dụ: [{section_id, score, completed_questions, total_questions}]"]

  Note: '''
  - Mỗi lần thi của user = 1 record.
  - section_scores lưu điểm chi tiết theo phần.
  '''

  Indexes {
    user_id [type: btree]
    test_id [type: btree]
    submitted_at [type: btree]
  }
}

// Câu trả lời chi tiết của user trong từng attempt
Table UserTestAnswers {
  id uuid [primary key, default: `uuid_generate_v4()`]
  attempt_id uuid [not null]
  question_id uuid [not null]
  selected_answer text
  is_correct boolean
  time_spent int [note: "Thời gian làm câu (giây)"]
  reviewed boolean [default: false, note: "Người dùng đã xem lại lời giải chưa"]

  Note: '''
  - Lưu chi tiết từng câu user đã làm.
  - Phục vụ tính năng review đáp án sau khi thi.
  - reviewed = true nếu user đã click xem giải thích.
  '''

  Indexes {
    attempt_id [type: btree]
    question_id [type: btree]
    is_correct [type: btree]
  }
}


// Table Notebooks
Table Notebooks {
  id uuid [primary key, default: `uuid_generate_v4()`]
  user_id uuid
  name varchar(100) [not null]
  vocab_count int [default: 0]
  created_at timestamptz [default: `CURRENT_TIMESTAMP`]
  options json [not null, note: "{show_hanzi: bool, show_pinyin: bool, show_meaning: bool, sort_by: string}"]
  is_premium boolean [default: false]
  
  Note: '''
  - Sổ tay cá nhân hoặc sẵn có (user_id NULL cho sẵn có).
  - Trigger cập nhật vocab_count từ NotebookVocabItems.
  - Truy cập premium kiểm tra qua Users.subscription_id.
  '''
  
  Indexes {
    user_id [type: btree]
  }
}

Table Vocabulary {
  id uuid [primary key, default: `uuid_generate_v4()`]
  hanzi varchar(50) [not null]
  pinyin varchar(50) [not null]
  meaning text [not null]
  notes text
  level text[] [not null, note: "Một từ có thể thuộc nhiều HSK levels: HSK1, HSK2, ..., HSK7-9, HSKK"]
  image_url text

  Note: '''
  - Unique constraint (hanzi+pinyin) để tránh trùng lặp
  - Từ vựng có thể liên kết nhiều từ loại (WordType)
  '''

  Indexes {
    (hanzi, pinyin) [unique]
    level [type: gin]
  }
}

Table WordType {
  code varchar(50) [primary key, note: "Enum: Danh từ, Đại từ, Động từ, Tính từ, Trạng từ, Giới từ, Liên từ, Trợ từ, Thán từ, Số từ, Lượng từ, Thành phần câu, Cụm từ"]

  Note: '''
  - Một từ có thể có nhiều từ loại
  '''
}

Table VocabularyWordType {
  vocab_id uuid [not null]
  word_type varchar(50) [not null]

  Note: '''
  - Bảng trung gian N:N giữa Vocabulary và WordType
  - Cho phép một từ vựng có nhiều từ loại
  '''

  Indexes {
    (vocab_id)
    (word_type)
  }

  primary key (vocab_id, word_type)
}

// Table NotebookVocabItems
Table NotebookVocabItems {
  notebook_id uuid [not null]
  vocab_id uuid [not null]
  status varchar(20) [not null, note: "Enum: 'đã thuộc', 'chưa thuộc', 'yêu thích', 'không chắc'"]
  added_at timestamptz [default: `CURRENT_TIMESTAMP`]
  
  Note: '''
  - Bảng liên kết N:N cho Notebook-Vocabulary.
  - Thống kê (ví dụ, số từ đã thuộc) qua COUNT GROUP BY status.
  '''
  
  Indexes {
    (notebook_id, vocab_id) [unique]
  }
}

// Table Tips
Table Tips {
  id uuid [primary key, default: `uuid_generate_v4()`]
  topic varchar(50) [not null, note: "Enum: 'Tất cả', 'Văn hóa', 'Ngữ pháp', 'Từ vựng', 'Phát âm', 'Khẩu ngữ', 'Kỹ năng nghe', 'Kỹ năng đọc', 'Kỹ năng viết', 'Khác'"]
  level varchar(10) [not null, note: "Enum: 'Sơ cấp', 'Trung cấp', 'Cao cấp'"]
  content jsonb [not null, note: "Lưu trữ nội dung Rich Text dưới dạng JSON, hỗ trợ định dạng văn bản và căn chỉnh"]
  answer text
  is_pinned boolean [not null, default: false, note: "Mới: Quyết định mẹo có được ghim (Pin) lên đầu danh sách hay không. Tối đa 3 mẹo được ghim/chủ đề."]
  created_by uuid
  
  Note: '''
  - Mẹo trang chủ với đáp án tùy chọn cho quiz.
  - Tổng số tính toán động.
  - Sử dụng cho mẹo bài học AI nếu lưu riêng.
  
  '''
  
  Indexes {
    topic [type: btree]
    level [type: btree]
    is_pinned [type: btree]
  }
}


// Table AILessons
Table AILessons {
  id uuid [primary key, default: `uuid_generate_v4()`]
  user_id uuid [not null]
  theme varchar(100) [not null]
  level varchar(10) [not null, note: "Enum: 'Cơ bản', 'Trung cấp', 'Cao cấp'"]
  created_at timestamptz [default: `CURRENT_TIMESTAMP`]
  content json [not null, note: "Structure: {vocabularies: [{vocab_id: uuid (ref Vocabulary.id), audio_url: string (S3 URL, null if not generated)}], phrases: [{vocab_id: uuid (ref Vocabulary.id), audio_url: string (S3 URL, null if not generated)}], tips: [{tip_id: uuid (ref Tips.id, null if not stored separately), vietnamese: string, chinese: string}], dialogues: [{messages: [{text: string (simplified hanzi), pinyin: string, audio_url: string (S3 URL, null if not generated)}]}]}"]
  
  Note: '''
  - Lưu bài học tạo bởi AI.
  - content.vocabularies/phrases reference Vocabulary.id.
  - Lưu bài học tạo bởi AI (chủ đề và mức độ người dùng chọn).
  - content.vocabularies/phrases reference Vocabulary.id để tránh trùng lặp.
  - content.tips có thể reference Tips.id hoặc lưu inline (vietnamese+chinese).
  - content.dialogues lưu dưới dạng JSON (chat-like, với audio URL, chỉ hán tự giản thể).
  - Audio tạo động (TTS API), URL lưu tạm thời.
  '''
  
  Indexes {
    user_id [type: btree]
    (theme, level) [type: btree]
  }
}

// Table AdminLogs
Table AdminLogs {
  id uuid [primary key, default: `uuid_generate_v4()`]
  user_id uuid [not null, note: "Tham chiếu Users.id, chỉ lưu user có role admin/super_admin"]
  action_type varchar(50) [not null, note: "Enum: CREATE, UPDATE, DELETE, BAN_USER, ..."]
  target_id uuid [note: "Đối tượng bị tác động, có thể là user_id, post_id, ..."]
  description text
  created_at timestamptz [default: `CURRENT_TIMESTAMP`]
  
  Note: '''
  - Theo dõi hành động admin (ví dụ, xóa post, khóa user) để kiểm toán.
  - user_id tham chiếu tới bảng Users, nhưng chỉ cho phép role admin/super_admin.
  '''
  
  Indexes {
    user_id [type: btree]
    created_at [type: btree]
  }
}


// Table TranslationHistory
Table TranslationHistory {
  id uuid [primary key, default: `uuid_generate_v4()`]
  user_id uuid [not null]
  original_text text [not null]
  original_lang varchar(10) [not null, note: "Enum: 'vi', 'zh'"]
  translated_text text [not null]
  translated_lang varchar(10) [not null, note: "Enum: 'vi', 'zh'"]
  is_ai boolean [default: false]
  created_at timestamptz [default: `CURRENT_TIMESTAMP`]
  
  Note: '''
  - Lưu lịch sử dịch (Trung-Việt/Việt-Trung), phân biệt dịch thường hoặc AI.
  - Người dùng xóa qua API.
  '''
  
  Indexes {
    user_id [type: btree]
    created_at [type: btree]
  }
}

// Table UserUsage
Table UserUsage {
  id uuid [primary key, default: `uuid_generate_v4()`]
  user_id uuid [not null]
  feature varchar(50) [not null, note: "Enum: 'ai_lesson', 'ai_translate'"]
  daily_count int [default: 0]
  last_reset timestamptz [default: `CURRENT_TIMESTAMP`]
  
  Note: '''
  - Quản lý quota sử dụng AI theo tính năng (tạo bài học, dịch, TTS).
  - daily_count reset hàng ngày qua cron job dựa trên subscription quotas.
  - last_reset để kiểm tra reset quota (ví dụ, reset nếu >24h).
  '''
  
  Indexes {
    user_id [type: btree]
    feature [type: btree]
  }
}

// Table Notifications
Table Notifications {
  id uuid [primary key, default: `uuid_generate_v4()`]
  recipient_id uuid [note: "NULL cho broadcast; nếu không NULL => thông báo riêng cho user"]
  audience varchar(20) [not null, note: "Enum: 'user','admin','all'"]
  type varchar(50) [not null, note: "Enum: 'system','report','violation','appeal','subscription','community','achievement','reminder','feedback'"]

  title varchar(200) [not null]
  content text [not null]
  
  related_type varchar(50) [note: "Loại đối tượng liên quan: 'post','comment','user','report','violation',..."]
  related_id uuid
  data jsonb [note: "Payload bổ sung cho frontend, ví dụ: { post_id:'...', reason:'...' }"]
  
  redirect_url text [note: "Route hoặc deep-link đến màn hình chi tiết (optional)"]
  read_at timestamptz [note: "Thời gian đọc; NULL nếu chưa đọc"]
  is_push_sent boolean [default: false, note: "Đánh dấu đã gửi push notification đến mobile"]
  created_at timestamptz [default: `CURRENT_TIMESTAMP`]
  expires_at timestamptz [note: "Tự động xóa sau thời hạn nếu có"]
  
  priority int [default: 0, note: "Độ ưu tiên hiển thị: 0=thường, 1=quan trọng"]
  from_system boolean [default: false, note: "True nếu thông báo được tạo bởi hệ thống tự động"]

  Note: '''
  - Dùng cho mọi loại thông báo: hệ thống, vi phạm, broadcast,...
  - from_system = true giúp phân biệt thông báo tự động và do admin gửi.
  - priority hữu ích để sắp xếp hoặc highlight các thông báo khẩn.
  '''

  Indexes {
    recipient_id [type: btree]
    audience [type: btree]
    created_at [type: btree]
    read_at [type: btree]
    (related_type, related_id) [type: btree]
    type [type: btree]
    priority [type: btree]
  }
}


// Table Reports
Table Reports {
  id uuid [primary key, default: `uuid_generate_v4()`]
  reporter_id uuid [note: "Ai tạo báo cáo; NULL nếu do hệ thống (AI) tự phát hiện"]
  target_type varchar(20) [not null, note: "Enum: 'post','comment','user','bug','other'"]
  target_id uuid [note: "ID đối tượng bị báo cáo (post_id, comment_id, user_id, ...)"]
  reason varchar(255) [not null, note: "Lý do báo cáo (VD: spam, xúc phạm, vi phạm bản quyền, lỗi hệ thống, v.v.)"]
  details text [note: "Mô tả chi tiết hoặc khiếu nại (nếu có)"]
  attachments jsonb [note: "Array of {url:string, mime:string, name?:string}"]
  
  status varchar(20) [default: 'pending', note: "Enum: 'pending','in_progress','resolved','dismissed'"]
  resolution text [note: "Kết quả xử lý hoặc ghi chú của admin"]
  
  assigned_to uuid [note: "Admin được giao xử lý (optional)"]
  resolved_by uuid [note: "Admin đã xử lý xong"]
  resolved_at timestamptz
  created_at timestamptz [default: `CURRENT_TIMESTAMP`]
  updated_at timestamptz [default: `CURRENT_TIMESTAMP`]
  
  related_violation_id uuid [note: "Liên kết với bản ghi vi phạm nếu có"]
  auto_flagged boolean [default: false, note: "True nếu được tạo bởi AI thay vì user"]

  Note: '''
  - Lưu báo cáo do user hoặc hệ thống (AI) tạo.
  - Khi target_type='bug' → dùng details + attachments để miêu tả lỗi hệ thống.
  - assigned_to chỉ dùng khi có phân công nội bộ.
  - resolution mô tả kết quả xử lý (VD: 'Nội dung hợp lệ', 'Bài viết bị xóa', ...).
  - auto_flagged = true cho phép lọc riêng báo cáo do AI tự động.
  - related_violation_id giúp truy vết sang Violation nếu xử lý dẫn đến vi phạm.
  '''

  Indexes {
    (target_type, target_id) [type: btree]
    reporter_id [type: btree]
    status [type: btree]
    created_at [type: btree]
    auto_flagged [type: btree]
  }
}

//Table Violations
Table Violations {
  id uuid [primary key, default: `uuid_generate_v4()`]
  user_id uuid [not null, note: "Người vi phạm"]
  target_type varchar(20) [not null, note: "Enum: 'post', 'comment'"]
  target_id uuid [not null, note: "ID bài viết hoặc bình luận vi phạm"]
  rule varchar(100) [not null, note: "Loại vi phạm: spam, ngôn từ kích động, nội dung nhạy cảm,..."]
  severity varchar(10) [not null, note: "Enum: 'low', 'medium', 'high'"]
  detected_by varchar(20) [not null, note: "Enum: 'admin', 'auto_ai'"]
  handled boolean [default: false, note: "Đã xử lý hay chưa"]
  created_at timestamptz [default: `CURRENT_TIMESTAMP`]
  resolved_at timestamptz [note: "Khi vi phạm được xử lý"]
  resolution text [note: "Ghi chú: cảnh cáo, xóa bài, khóa tài khoản,..."]

  Note: '''
  - Lưu lịch sử các vi phạm, bao gồm do AI tự phát hiện hoặc do admin xử lý từ báo cáo.
  - handled = false: chờ xác nhận từ admin.
  - severity để phân loại mức độ vi phạm.
  - Admin có thể xem lại các vi phạm chưa xử lý và quyết định giữ nguyên hoặc khôi phục.
  '''
  
  Indexes {
    user_id [type: btree]
    target_id [type: btree]
    handled [type: btree]
    created_at [type: btree]
  }
}

Table Appeals {
  id uuid [primary key, default: `uuid_generate_v4()`]
  violation_id uuid [not null]
  user_id uuid [not null]
  reason text [not null]
  status varchar(20) [default: 'pending', note: "Enum: 'pending','accepted','rejected'"]
  created_at timestamptz [default: `CURRENT_TIMESTAMP`]
  resolved_at timestamptz
  resolved_by uuid 
  notes text

  Note: '''
  - Người dùng có thể khiếu nại sau khi bài viết/comment bị gỡ.
  - Khi admin xử lý: nếu accepted → khôi phục bài, nếu rejected → xóa sau 7 ngày.
  - Mỗi violation có thể có 1 appeal tương ứng.
  - Khi pending thì resolved = null
  '''

  Indexes {
    violation_id [type: btree]
    user_id [type: btree]
    status [type: btree]
    created_at [type: btree]
  }
}

// Table Media
Table Media {
  id uuid [primary key, default: `uuid_generate_v4()`]
  original_name varchar(255) [not null]
  display_name varchar(255) [note: "Display name set by Admin (e.g., 'HSK 5 Phần Nghe Bài 3')"]
  s3_path varchar(255) [unique, not null]
  mime_type varchar(50)
  size_bytes int
  uploaded_by uuid [note: "NULL if system-generated or auto-scraped file"]
  usage_type varchar(50) [note: "Enum: 'mocktest_audio', 'vocab_image', 'user_avatar', 'system'"]
  created_at timestamptz [default: `CURRENT_TIMESTAMP`]
  
  Note: '''
  - Quản lý tập trung các tài nguyên file (audio, image).
  - Rất quan trọng cho file Vocabulary images (tự động cào) và MockTest Audios (cần tên rõ ràng).
  '''
  
  Indexes {
    s3_path [unique]
    created_at [type: btree]
  }
}

// Table RefreshTokens
Table RefreshTokens {
  id uuid [primary key, default: `uuid_generate_v4()`]
  user_id uuid [not null]
  token text [unique, not null]
  created_at timestamptz [default: `CURRENT_TIMESTAMP`]
  expires_at timestamptz [not null]
  
  Note: '''
  - Lưu trữ refresh token cho cơ chế xác thực, đảm bảo token là duy nhất.
  '''
  
  Indexes {
    user_id [type: btree]
    token [unique]
  }
}

// Relationships
Ref: Users.badge_level > BadgeLevels.level [delete: set default]
Ref: Users.subscription_id > Subscriptions.id [delete: set null]

Ref: UserSessions.user_id > Users.id [delete: cascade]
Ref: UserDailyActivity.user_id > Users.id [delete: cascade]
Ref: UserStreaks.user_id > Users.id [delete: cascade]

Ref: UserAchievements.user_id > Users.id [delete: cascade]
Ref: UserAchievements.achievement_id > Achievements.id [delete: restrict]

Ref: Payments.user_id > Users.id [delete: restrict]
Ref: Payments.subscription_id > Subscriptions.id [delete: restrict]
Ref: Payments.processed_by_admin > Users.id [delete: set null]

Ref: Posts.user_id > Users.id
Ref: Posts.deleted_by > Users.id

Ref: Comments.post_id > Posts.id [delete: cascade]
Ref: Comments.user_id > Users.id

Ref: Comments.parent_comment_id > Comments.id [delete: cascade]
Ref: Comments.deleted_by > Users.id

Ref: PostMediaMap.post_id > Posts.id [delete: cascade]
Ref: PostMediaMap.media_id > Media.id [delete: cascade]

Ref: ModerationLogs.performed_by > Users.id

Ref: PostLikes.post_id > Posts.id [delete: cascade]
Ref: PostLikes.user_id > Users.id [delete: cascade]

Ref: PostViews.post_id > Posts.id [delete: cascade]
Ref: PostViews.user_id > Users.id [delete: set null]

Ref: Notebooks.user_id > Users.id [delete: cascade]
Ref: NotebookVocabItems.notebook_id > Notebooks.id [delete: cascade]
Ref: NotebookVocabItems.vocab_id > Vocabulary.id [delete: restrict]

Ref: AILessons.user_id > Users.id [delete: cascade]

Ref: AdminLogs.user_id > Users.id [delete: set null]

Ref: Reports.reporter_id > Users.id [delete: set null]
Ref: Reports.assigned_to > Users.id [delete: set null]
Ref: Reports.resolved_by > Users.id [delete: set null]
Ref: Reports.related_violation_id > Violations.id [delete: set null]

Ref: Appeals.violation_id > Violations.id [delete: cascade]
Ref: Appeals.user_id > Users.id [delete: cascade]
Ref: Appeals.resolved_by > Users.id [delete: set null]

Ref: Violations.user_id > Users.id [delete: cascade]

Ref: MockTestSections.test_id > MockTests.id [delete: cascade]
Ref: MockTestQuestions.section_id > MockTestSections.id [delete: cascade]
Ref: MockTestQuestions.media_id > Media.id [delete: set null]

Ref: MockTests.created_by > Users.id [delete: set null]

Ref: UserTestScores.user_id > Users.id [delete: cascade]
Ref: UserTestScores.test_id > MockTests.id [delete: cascade]

Ref: UserTestAttempts.user_id > Users.id [delete: cascade]
Ref: UserTestAttempts.test_id > MockTests.id [delete: cascade]

Ref: UserTestAnswers.attempt_id > UserTestAttempts.id [delete: cascade]
Ref: UserTestAnswers.question_id > MockTestQuestions.id [delete: cascade]

Ref: Tips.created_by > Users.id [delete: set null]
Ref: Media.uploaded_by > Users.id [delete: set null]
Ref: TranslationHistory.user_id > Users.id [delete: cascade]
Ref: UserUsage.user_id > Users.id [delete: cascade]

Ref: Notifications.recipient_id > Users.id [delete: set null]

Ref: RefreshTokens.user_id > Users.id [delete: cascade]
Ref: VocabularyWordType.vocab_id > Vocabulary.id [delete: cascade]
Ref: VocabularyWordType.word_type > WordType.code [delete: cascade]